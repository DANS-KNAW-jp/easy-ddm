<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<import resource="conf/store-context.xml" />
	<import resource="conf/dmo-collections-context.xml" />

	<bean name="wicketApplication" class="nl.knaw.dans.easy.web.EasyWicketApplication" />

	<bean class="nl.knaw.dans.easy.business.bean.EasyContextListener" />

	<!-- ================= -->
	<!-- Business Services -->
	<!-- ================= -->
	<bean name="services" class="nl.knaw.dans.easy.servicelayer.services.Services">
		<property name="depositService" ref="depositService" />
		<property name="datasetService" ref="datasetService" />
		<property name="itemService" ref="itemService" />
		<property name="userService" ref="userService" />
		<property name="migrationService" ref="migrationService" />
		<property name="federativeUserService" ref="federativeUserService" />
		<property name="searchService" ref="searchService" />
		<property name="disciplineService" ref="disciplineService" />
		<property name="jumpoffService" ref="jumpoffService" />
		<property name="collectionService" ref="collectionService" />

	</bean>

	<bean
		name="systemReadOnlyStatus"
		class="nl.knaw.dans.easy.servicelayer.SystemReadOnlyStatus">
		<!-- exchange system status (read only mode) between easy-business instances (e.g. web-ui, sword) -->
		<constructor-arg
			index="0"
			value="${easy.business.system.status.file}"/>
	</bean>
	
	<bean name="
			jumpoffService "
			class="nl.knaw.dans.easy.business.services.EasyJumpoffService"/>

	<bean name="disciplineService"
		  class="nl.knaw.dans.easy.business.services.EasyDisciplineCollectionService"/>

	<bean name="depositService"
		  class="nl.knaw.dans.easy.business.services.EasyDepositService"/>

	<bean name="datasetService"
		class="nl.knaw.dans.easy.business.services.EasyDatasetService">
		<constructor-arg type="nl.knaw.dans.easy.DataciteServiceConfiguration" ref="dataciteServiceConfiguration" />
	</bean>

	<bean name="itemService" class="nl.knaw.dans.easy.business.services.EasyItemService" >
		<property name="processDataFileInstructions" value="${process-data-file-instructions}" />
	</bean>
	
	<bean name="userService" class="nl.knaw.dans.easy.business.services.EasyUserService">
		<property name="loginService" ref="loginService" />
		<property name="passwordService" ref="passwordService" />
		<property name="registrationService" ref="registrationService" />
	</bean>

	<bean name="loginService" class="nl.knaw.dans.easy.business.authn.LoginService">
		<property name="authenticationSpecification" ref="authenticationSpecification" />
	</bean>

	<bean name="passwordService" class="nl.knaw.dans.easy.business.authn.PasswordService">
		<property name="authenticationSpecification" ref="authenticationSpecification" />
		<property name="changePasswordSpecification" ref="changePasswordSpecification" />
	</bean>

	<bean name="registrationService" class="nl.knaw.dans.easy.business.authn.RegistrationService">
		<property name="authenticationSpecification" ref="authenticationSpecificationWithoutMasterkey" />
	</bean>

	<bean name="changePasswordSpecification"
		class="nl.knaw.dans.easy.business.authn.ChangePasswordSpecification">
		<property name="authenticationSpecification" ref="authenticationSpecification" />
	</bean>

	<bean name="authenticationSpecification"
		class="nl.knaw.dans.easy.business.authn.AuthenticationSpecification">
		<property name="masterkeyPasswordFile">
			<value type="java.io.File">${easy.admin.masterkeyfile}</value>
		</property>
	</bean>

	<bean name="authenticationSpecificationWithoutMasterkey"
		class="nl.knaw.dans.easy.business.authn.AuthenticationSpecification" />

	<bean name="searchService" class="nl.knaw.dans.easy.business.services.EasySearchService" />

	<bean name="migrationService"
		class="nl.knaw.dans.easy.business.services.EasyMigrationService" />

	<bean name="federativeUserService"
		class="nl.knaw.dans.easy.business.services.EasyFederativeUserService">
		<property name="federationLoginEnabled" value="${easy.federationLogin.enabled}" />
		<property name="federationUrl" value="${easy.federationLogin.federationUrl}" />
		<property name="propertyNameRemoteUser"
			value="${easy.federationLogin.propertyMapping.remoteUser}" />
		<property name="propertyNameEmail"
			value="${easy.federationLogin.propertyMapping.email}" />
		<property name="propertyNameFirstName"
			value="${easy.federationLogin.propertyMapping.firstName}" />
		<property name="propertyNameSurname"
			value="${easy.federationLogin.propertyMapping.surname}" />
		<property name="propertyNameOrganization"
			value="${easy.federationLogin.propertyMapping.organization}" />
		<property name="propertyNameShibSessionId"
			value="${easy.federationLogin.propertyMapping.shibSessionId}" />
	</bean>
	
	<bean name="federationLoginDebugEnabled" class="java.lang.Boolean" factory-method="parseBoolean">
		<constructor-arg value="${easy.federationLogin.debug.enabled}" />
	</bean>
	
	<bean name="federationLoginDebugUserFile" class="java.lang.String">
		<constructor-arg value="${easy.federationLogin.debug.user.file}" />
	</bean>

	<bean name="collectionService"
		class="nl.knaw.dans.easy.business.services.EasyCollectionService" />


	<!-- ================== -->
	<!-- Security -->
	<!-- ================== -->
	<bean name="security" class="nl.knaw.dans.easy.security.Security">
		<constructor-arg ref="authz" />
	</bean>

	<bean
		name="authz"
		class="nl.knaw.dans.easy.security.CodedAuthz">
		<property
			name="systemReadOnlyStatus"
			ref="systemReadOnlyStatus"/>
	</bean>

	<!-- ================= -->
	<!-- Business Audit -->
	<!-- ================= -->

	<bean name="businessAudit" class="nl.knaw.dans.easy.data.audit.Audit">
		<property name="trailers">
			<list>
				<ref bean="fileBasedAuditTrail" />
				<ref bean="syslogAuditTrail" />
			</list>
		</property>
		<property name="enabled" value="${business.audit.enabled}" />
	</bean>

	<bean name="fileBasedAuditTrail" class="nl.knaw.dans.easy.data.audit.FileBasedAuditTrail"
		destroy-method="close">
		<constructor-arg index="0" value="${business.audit.file}" />
	</bean>

	<bean name="syslogAuditTrail" class="nl.knaw.dans.easy.data.audit.SyslogAuditTrail" />

	<!-- ================== -->
	<!-- BeanFactory -->
	<!-- ================== -->
	<bean name="beanFactory" class="nl.knaw.dans.common.lang.repo.bean.BeanFactory">
		<constructor-arg ref="beanFactoryDelegator" />
	</bean>

	<bean name="beanFactoryDelegator"
		class="nl.knaw.dans.common.jibx.bean.JiBXBeanFactoryDelegator" />

	<!-- ================== -->
	<!-- Data Access Points -->
	<!-- ================== -->
	<bean name="data" class="nl.knaw.dans.easy.data.Data">
		<property name="userRepo" ref="userRepo" />
		<property name="groupRepo" ref="groupRepo" />
		<property name="migrationRepo" ref="migrationRepo" />
		<property name="federativeUserRepo" ref="federativeUserRepo" />
		<property name="easyStore" ref="easyStore" />
		<property name="fileStoreAccess" ref="fileStoreAccess" />
		<property name="datasetSearch" ref="datasetSearch" />
		<property name="searchEngine" ref="searchEngine" />
		<property name="collectionAccess" ref="collectionAccess" />

		<property name="downloadLimit" value="${data.downloadLimit}" />
		<property name="maxNumberOfFiles" value="${file.downloadLimit}" />
	</bean>

	<bean name="userRepo" class="nl.knaw.dans.easy.ldap.EasyLdapUserRepo">
		<constructor-arg ref="ldapClient" />
		<constructor-arg value="${ldap.context.users}" />
	</bean>

	<bean name="groupRepo" class="nl.knaw.dans.easy.ldap.EasyLdapGroupRepo">
		<constructor-arg ref="ldapClient" />
		<constructor-arg value="${ldap.context.groups}" />
	</bean>

	<bean name="migrationRepo" class="nl.knaw.dans.easy.ldap.EasyLdapMigrationRepo">
		<constructor-arg ref="ldapClient" />
		<constructor-arg value="${ldap.context.migration}" />
	</bean>

	<bean name="federativeUserRepo" class="nl.knaw.dans.easy.ldap.EasyLdapFederativeUserRepo">
		<constructor-arg ref="ldapClient" />
		<constructor-arg value="${ldap.context.federation}" />
	</bean>

	<bean name="ldapClient" class="nl.knaw.dans.common.ldap.ds.LdapClient">
		<property name="dirContextSupplier" ref="dirContextSupplier" />
	</bean>

	<bean name="dirContextSupplier" class="nl.knaw.dans.common.ldap.ds.StandAloneDS">
		<property name="providerURL" value="${ldap.providerURL}" />
		<property name="securityPrincipal" value="${ldap.securityPrincipal}" />
		<property name="securityCredentials" value="${ldap.securityCredentials}" />
	</bean>

	<bean name="fedora" class="nl.knaw.dans.common.fedora.Fedora">
		<constructor-arg index="0">
			<value>${fedora.base.url}</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>${fedora.admin.username}</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>${fedora.admin.userpass}</value>
		</constructor-arg>
		<property name="sidListBufferSizeMap">
			<map>
				<entry key="easy-dataset" value="10" />
				<entry key="easy-folder" value="40" />
				<entry key="easy-file" value="100" />
			</map>
		</property>
	</bean>

	<bean name="easyStore" class="nl.knaw.dans.common.fedora.store.EasyFedoraStore">
		<constructor-arg index="0" value="${easy.store.name}" />
		<constructor-arg index="1" ref="fedora" />
		<property name="eventListeners">
			<list>
				<ref bean="fileStoreSyncListener" />
				<ref bean="repoSearchListener" />
			</list>
		</property>
	</bean>

	<!-- ====== A subset of file and folder metadata is kept in the fedora database 
		======= -->
	<!-- fileStoreSyncListener is responsible for keeping this (part of) the 
		database in sync with Fedora store -->
	<bean name="fileStoreSyncListener" class="nl.knaw.dans.easy.fedora.db.FileStoreSyncListener"
		depends-on="dbUtilRegistrator" />

	<bean name="fileStoreAccess" class="nl.knaw.dans.easy.fedora.db.FedoraFileStoreAccess"
		depends-on="dbUtilRegistrator" />

	<bean name="dbUtilRegistrator" class="nl.knaw.dans.easy.db.DbUtil$Registrator">
		<property name="localConfig" ref="dbLocalConfig" />
	</bean>

	<bean name="dbLocalConfig" class="nl.knaw.dans.easy.db.DbLocalConfig">
		<constructor-arg index="0">
			<value>${fedora.db.username}</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>${fedora.db.password}</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>${fedora.db.connectionUrl}</value>
		</constructor-arg>
		<constructor-arg index="3">
			<value>${fedora.db.hbnDriverClass}</value>
		</constructor-arg>
		<constructor-arg index="4">
			<value>${fedora.db.hbnDialect}</value>
		</constructor-arg>
	</bean>
	<!-- ====== /A subset of file and folder metadata is kept in the fedora 
		database ======= -->

	<!-- ====== Search ======= -->
	<bean name="searchEngine" class="nl.knaw.dans.common.solr.SolrSearchEngine">
		<constructor-arg index="0">
			<value>${solr.url}</value>
		</constructor-arg>
		<constructor-arg index="1" ref="easySearchBeanFactory" />
	</bean>

	<bean name="easySearchBeanFactory" class="nl.knaw.dans.easy.data.search.EasySearchBeanFactory" />

	<!-- repoSearchListener is responsible for keeping the search index in sync 
		with Fedora store -->
	<bean name="repoSearchListener"
		class="nl.knaw.dans.common.lang.reposearch.RepoSearchListener">
		<constructor-arg ref="searchEngine" />
	</bean>

	<bean name="datasetSearch" class="nl.knaw.dans.easy.data.search.DatasetSearchImpl">
		<constructor-arg index="0" ref="searchEngine" />
	</bean>
	<!-- ====== /Search ======= -->

	<bean name="collectionAccess"
		class="nl.knaw.dans.easy.data.collections.DmoCollectionsAccessImpl">
		<constructor-arg ref="dmoCollections" />
	</bean>

	<!-- ================= -->
	<!-- External services -->
	<!-- ================= -->

	<bean name="externalServices" class="nl.knaw.dans.easy.data.ext.ExternalServices"
		destroy-method="close">
		<property name="mailOffice" ref="mailOffice" />
		<property name="adminMailer" ref="adminMailer" />
	</bean>

	<bean name="mailOffice" class="nl.knaw.dans.easy.mail.EasyMailerImpl">
		<property name="smtpHost" value="${mail.smtp.host}" />
		<property name="from" value="${mail.fromAddress}" />
		<property name="bccs" value="${mail.bccs}" />
	</bean>

	<bean name="adminMailer" class="nl.knaw.dans.common.lang.mail.AdminMailer">
		<constructor-arg>
			<bean class="nl.knaw.dans.easy.mail.MailerAdapterForAdminMailer">
				<constructor-arg>
					<!-- Almost identical to mailOffice, but it does not BCC to anyone -->
					<bean class="nl.knaw.dans.easy.mail.EasyMailerImpl">
						<property name="smtpHost" value="${mail.smtp.host}" />
						<property name="from" value="${mail.fromAddress}" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="EASY Web-UI" />
		<property name="sendOnStarting" value="${admin.mailer.sendOnStarting}" />
		<property name="sendOnClosing" value="${admin.mailer.sendOnClosing}" />
		<property name="exeptionMailInterval" value="15" />
		<property name="adminMailAddressesCS" value="${admin.mailer.addresses}" />
	</bean>

	<bean name="dataciteServiceConfiguration"
		class="nl.knaw.dans.easy.DataciteServiceConfiguration">
		<property name="username" value="${datacite.username}" />
		<property name="password" value="${datacite.password}" />
		<property name="doiRegistrationUri" value="${datacite.registration.doi.uri}" />
		<property name="metadataRegistrationUri" value="${datacite.registration.metadata.uri}" />
		<property name="datasetResolver" value="${dataset.resolver.uri}" />
	</bean>

	<bean class="nl.knaw.dans.easy.business.dataset.SubmissionDispatcherFactory">
		<constructor-arg value="WEB" />
		<constructor-arg type="java.net.URL" value="${pid.service.base.url}" />
		<constructor-arg type="nl.knaw.dans.easy.DataciteServiceConfiguration" ref="dataciteServiceConfiguration" />
	</bean>

	<!-- ============== -->
	<!-- Miscellaneous -->
	<!-- ============== -->

	<bean name="resourceLocator" class="nl.knaw.dans.common.lang.ResourceLocator">
		<constructor-arg>
			<list>
				<ref bean="homeDir" />
				<ref bean="editableContentHome" />
                <ref bean="licenseResources" />
			</list>
		</constructor-arg>
	</bean>

	<bean
		class="nl.knaw.dans.common.lang.spring.HomeDirectoryBasedPropertyPlaceholderConfigurer">
		<constructor-arg ref="homeDir" />
	</bean>

	<bean name="homeDir"
		class="nl.knaw.dans.common.lang.EnvironmentVariableBasedHomeDirectory">
		<property name="environmentVariableName" value="EASY_WEBUI_HOME" />
	</bean>

	<bean name="editableContentHome" class="nl.knaw.dans.common.lang.FileSystemHomeDirectory">
		<constructor-arg>
			<value type="java.io.File">${easy.editable.content.root}</value>
		</constructor-arg>
	</bean>

    <bean name="licenseResources" class="nl.knaw.dans.common.lang.FileSystemHomeDirectory">
        <constructor-arg>
            <value type="java.io.File">${license.resources}</value>
        </constructor-arg>
    </bean>

	<!-- BeanPostProcessor for Business layer -->
	<bean class="nl.knaw.dans.easy.business.bean.BusinessBeanPostProcessor" />


	<!-- a HTTP Session-scoped bean exposed as a proxy -->
	<bean id="taskService" class="nl.knaw.dans.common.wicket.TaskServiceImpl"
		scope="session">

		<!-- this next element effects the proxying of the surrounding bean -->
		<aop:scoped-proxy />
		<constructor-arg>
			<bean class="org.wicketstuff.progressbar.spring.AsynchronousExecutor" />
		</constructor-arg>
	</bean>

	<!-- a singleton-scoped bean injected with a proxy to the above bean -->
	<bean id="sessionScopeService" class="nl.knaw.dans.easy.web.SessionScopeService">

		<!-- a reference to the proxied 'taskService' bean -->
		<property name="taskService" ref="taskService" />

	</bean>

	<bean id="staticContentBaseUrl" class="java.lang.String">
		<constructor-arg type="java.lang.String"
			value="${easy.link-base.instructions}" />
	</bean>
    
    <bean id="usingEasyLink" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="${easy.link.using-easy}" />
    </bean>

    <bean id="contactLink" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="${easy.link.contact}" />
    </bean>

    <bean id="disclaimerLink" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="${easy.link.disclaimer}" />
    </bean>

    <bean id="legalLink" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="${easy.link.legal}" />
    </bean>

    <bean id="propertyRightStatementLink" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="${easy.link.property-right-statement}" />
    </bean>

    <bean id="reusingDataLink" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="${easy.link.reusing-data}" />
    </bean>
    
    <bean id="certificeringLink" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="${easy.link.certificering}" />
    </bean>

    <bean id="audioVideoPlayerUrl" class="java.lang.String">
        <constructor-arg type="java.lang.String"
                         value="${easy.audio-video.player-url}" />
    </bean>

    <bean id="aboutDepositingDataLink" class="java.lang.String">
        <constructor-arg type="java.lang.String"
            value="${easy.link.about-depositing-data}" />
    </bean>

	<bean id="piwikSiteId" class="java.lang.String">
		<constructor-arg type="java.lang.String"
						 value="${easy.piwik.site-id}" />
	</bean>

	<bean id="pakbonValidatorCredentials"
		class="nl.knaw.dans.platform.language.pakbon.PakbonValidatorCredentials">
		<constructor-arg index="0" type="java.lang.String">
			<value>${pakbon.validator.username}</value>
		</constructor-arg>
		<constructor-arg index="1" type="java.lang.String">
			<value>${pakbon.validator.password}</value>
		</constructor-arg>
	</bean>
	
	<bean id="ticketService" class="nl.knaw.dans.easy.business.services.LennyTicketService">
		<property name="ticketServiceUrl" value="${easy.audio-video.ticket-service.url}" />
		<property name="accessDurationInMilliseconds" value="${easy.audio-video.ticket-service.ticket-duration-ms}" />
	</bean>
</beans>
